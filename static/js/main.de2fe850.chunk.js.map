{"version":3,"sources":["services/index.js","actions/index.js","pages/Login.js","components/Header.js","components/NewExpenseForm.js","components/EditExpenseForm.js","components/ExpensesTable.js","pages/Wallet.js","App.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["currenciesAPI","fetch","then","response","json","ok","Promise","resolve","reject","requestCurrenciesSuccess","currencies","type","fetchCurrencies","dispatch","a","error","Login","state","email","password","disabled","handleChange","bind","handleClick","loginValidation","this","props","handleEmail","history","push","target","setState","name","value","test","length","className","onChange","data-testid","placeholder","onClick","React","Component","connect","payload","emailChange","Header","getTotalExpenses","expenses","reduce","total","each","currency","exchangeRates","rate","parseFloat","ask","toFixed","user","wallet","defaultProps","INITIAL_STATE","description","method","tag","id","NewExpenseForm","renderInput","renderSelect","e","preventDefault","saveExpense","label","htmlFor","map","key","options","option","renderSelectCurrencies","getCurrencies","expense","EditExpenseForm","expenseId","find","item","endExpenseEdit","finishExpenseEdit","ExpensesTable","callback","deleteExpense","editExpense","index","parseInt","renderButton","eraseExpense","modifyExpense","Wallet","isEditing","App","path","component","exact","INITIAL_STATE_USER","INITIAL_STATE_WALLET","reducer","combineReducers","action","isFetching","Object","keys","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.de2fe850.chunk.js","sourcesContent":["const APIURL = 'https://economia.awesomeapi.com.br/json/all';\n\nconst currenciesAPI = () => (\n  fetch(APIURL)\n    .then((response) => (\n      response\n        .json()\n        .then((json) => (response.ok ? Promise.resolve(json) : Promise.reject(json)))\n    ))\n);\n\nexport default currenciesAPI;\n","import currenciesAPI from '../services';\n// Coloque aqui suas actions\nexport const EMAIL = 'EMAIL';\nexport const REQUEST_START = 'REQUEST_START';\nexport const REQUEST_SUCCESS = 'REQUEST_SUCCESS';\nexport const REQUEST_FAIL = 'REQUEST_FAIL';\nexport const SAVE_EXPENSE = 'SAVE_EXPENSE';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\nexport const EDIT_EXPENSE_START = 'EDIT_EXPENSE_START';\nexport const EDIT_EXPENSE_END = 'EDIT_EXPENSE_END';\n\nexport const emailChange = (payload) => ({\n  type: EMAIL,\n  payload,\n});\n\nconst requestCurrenciesTry = () => ({\n  type: REQUEST_START,\n});\n\nconst requestCurrenciesSuccess = (currencies) => ({\n  type: REQUEST_SUCCESS,\n  currencies,\n});\n\nconst requestCurrenciesFail = (error) => ({\n  type: REQUEST_FAIL,\n  error,\n});\n\nexport const fetchCurrencies = () => async (dispatch) => {\n  try {\n    dispatch(requestCurrenciesTry());\n\n    const currencies = await currenciesAPI();\n\n    dispatch(requestCurrenciesSuccess(currencies));\n  } catch (error) {\n    dispatch(requestCurrenciesFail(error));\n  }\n};\n\nexport const saveExpense = (expenses) => ({\n  type: SAVE_EXPENSE,\n  expenses,\n});\n\nexport const deleteExpense = (expense) => ({\n  type: DELETE_EXPENSE,\n  expense,\n});\n\nexport const editExpense = (expense) => ({\n  type: EDIT_EXPENSE_START,\n  expense,\n});\n\nexport const endExpenseEdit = (expense) => ({\n  type: EDIT_EXPENSE_END,\n  expense,\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { emailChange } from '../actions';\n\nimport '../styles/Login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      password: '',\n      disabled: true,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.loginValidation = this.loginValidation.bind(this);\n  }\n\n  handleClick() {\n    const { handleEmail, history } = this.props;\n    const { email } = this.state;\n\n    handleEmail(email);\n    history.push('/carteira');\n  }\n\n  handleChange({ target }) {\n    this.setState(\n      {\n        [target.name]: target.value,\n      },\n      () => {\n        this.loginValidation();\n      },\n    );\n  }\n\n  loginValidation() {\n    const { email, password } = this.state;\n    let disabled = false;\n    const EMAIL_VALIDATION = /^[\\w]+@([\\w]+\\.)+[\\w]{2,4}$/gi;\n    const MIN_PASSWORD_LENGTH = 6;\n    disabled = !(EMAIL_VALIDATION.test(email) && password.length >= MIN_PASSWORD_LENGTH);\n    this.setState({ disabled });\n  }\n\n  render() {\n    const { email, password, disabled } = this.state;\n    return (\n      <main className=\"login-main\">\n        <header className=\"login-header\">\n          <h1>Trybe Wallet</h1>\n        </header>\n        <form className=\"login-form\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={ email }\n            onChange={ this.handleChange }\n            data-testid=\"email-input\"\n            placeholder=\"user@email.com\"\n            className=\"login-input\"\n          />\n          <input\n            type=\"password\"\n            name=\"password\"\n            value={ password }\n            onChange={ this.handleChange }\n            data-testid=\"password-input\"\n            placeholder=\"******\"\n            className=\"login-input\"\n          />\n          <button\n            type=\"submit\"\n            disabled={ disabled }\n            className=\"login-btn\"\n            onClick={ this.handleClick }\n          >\n            Entrar\n          </button>\n        </form>\n      </main>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleEmail: (payload) => dispatch(emailChange(payload)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  handleEmail: PropTypes.func.isRequired,\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Header extends React.Component {\n  constructor() {\n    super();\n\n    this.getTotalExpenses = this.getTotalExpenses.bind(this);\n  }\n\n  getTotalExpenses() {\n    const { expenses } = this.props;\n    const totalExpenses = expenses.reduce((total, each) => {\n      const { value, currency, exchangeRates } = each;\n      const rate = parseFloat(exchangeRates[currency].ask);\n      return total + parseFloat(value) * rate;\n    }, 0);\n    return totalExpenses.toFixed(2);\n  }\n\n  render() {\n    const { email } = this.props;\n    return (\n      <header className=\"wallet-header\">\n        <h1>Trybe Wallet</h1>\n        <p data-testid=\"email-field\" className=\"wallet-email\">{`E-mail: ${email}`}</p>\n        <div className=\"wallet-total-value\">\n          <span data-testid=\"total-field\">\n            {`Despesa Total: R$ ${this.getTotalExpenses()} `}\n          </span>\n          <span data-testid=\"header-currency-field\">BRL</span>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(Header);\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object),\n};\n\nHeader.defaultProps = {\n  expenses: [],\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport currenciesAPI from '../services';\nimport { fetchCurrencies as getCurrencies, saveExpense as addExpense } from '../actions';\n\nconst INITIAL_STATE = {\n  value: '0',\n  description: '',\n  currency: 'USD',\n  method: 'Dinheiro',\n  tag: 'Alimentação',\n  id: 0,\n};\n\nclass NewExpenseForm extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      ...INITIAL_STATE,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.renderInput = this.renderInput.bind(this);\n    this.renderSelect = this.renderSelect.bind(this);\n  }\n\n  handleChange({ target }) {\n    this.setState({\n      [target.name]: target.value,\n    });\n  }\n\n  async handleClick(e) {\n    e.preventDefault();\n    const { value, description, currency, method, tag, id } = this.state;\n    const { saveExpense } = this.props;\n    const exchangeRates = await currenciesAPI();\n    const expense = {\n      id,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates,\n    };\n    saveExpense(expense);\n    this.setState({\n      ...INITIAL_STATE,\n      id: id + 1,\n    });\n  }\n\n  renderInput(label, type, name, value) {\n    return (\n      <label htmlFor={ `${name}-input` }>\n        {`${label}: `}\n        <input\n          type={ type }\n          id={ `${name}-input` }\n          name={ name }\n          data-testid={ `${name}-input` }\n          onChange={ this.handleChange }\n          value={ value }\n          className={ `${name}-input` }\n        />\n      </label>\n    );\n  }\n\n  renderSelectCurrencies(value, handleChange) {\n    const { currencies } = this.props;\n    return (\n      <select\n        id=\"currency-input\"\n        name=\"currency\"\n        data-testid=\"currency-input\"\n        onChange={ handleChange }\n        value={ value }\n        className=\"currency-input\"\n      >\n        {currencies.map((currency) => {\n          if (currency === 'USDT') return '';\n          return (\n            <option key={ currency } data-testid={ currency }>\n              {currency}\n            </option>\n          );\n        })}\n      </select>\n    );\n  }\n\n  renderSelect(label, name, value, options) {\n    return (\n      <label htmlFor={ `${name}-input` }>\n        {`${label}: `}\n        <select\n          id={ `${name}-input` }\n          name={ name }\n          data-testid={ `${name}-input` }\n          onChange={ this.handleChange }\n          value={ value }\n        >\n          {options.map((option) => (\n            <option key={ option }>{option}</option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n\n  render() {\n    const { value, description, currency, method, tag } = this.state;\n    const tags = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    const methods = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n    return (\n      <form className=\"new-expense-form\">\n        <label htmlFor=\"currency-input\">\n          {'Moeda: '}\n          {this.renderSelectCurrencies(currency, this.handleChange)}\n        </label>\n        {this.renderInput('Valor', 'number', 'value', value)}\n        {this.renderInput('Descrição', 'text', 'description', description)}\n        {this.renderSelect('Tag', 'tag', tag, tags)}\n        {this.renderSelect('Método de pagamento', 'method', method, methods)}\n        <button\n          type=\"submit\"\n          onClick={ this.handleClick }\n          className=\"expense-btn add-expense\"\n        >\n          Adicionar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrencies: () => dispatch(getCurrencies()),\n  saveExpense: (expense) => dispatch(addExpense(expense)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewExpenseForm);\n\nNewExpenseForm.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.string),\n  saveExpense: PropTypes.func.isRequired,\n};\n\nNewExpenseForm.defaultProps = {\n  currencies: [],\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport {\n  fetchCurrencies as getCurrencies,\n  endExpenseEdit as finishExpenseEdit,\n} from '../actions';\n\nclass EditExpenseForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { expenses, expenseId } = this.props;\n    const expense = expenses.find((item) => item.id === expenseId);\n    const { value, description, currency, method, tag, id, exchangeRates } = expense;\n    this.state = {\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      id,\n      exchangeRates,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.renderInput = this.renderInput.bind(this);\n    this.renderSelect = this.renderSelect.bind(this);\n  }\n\n  handleChange({ target }) {\n    this.setState({\n      [target.name]: target.value,\n    });\n  }\n\n  async handleClick(e) {\n    e.preventDefault();\n    const { value, description, currency, method, tag, id, exchangeRates } = this.state;\n    const { endExpenseEdit } = this.props;\n    const expense = {\n      id,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates,\n    };\n    endExpenseEdit(expense);\n  }\n\n  renderInput(label, type, name, value) {\n    return (\n      <label htmlFor={ `${name}-input` }>\n        {`${label}: `}\n        <input\n          type={ type }\n          id={ `${name}-input` }\n          name={ name }\n          data-testid={ `${name}-input` }\n          onChange={ this.handleChange }\n          value={ value }\n          className={ `${name}-input` }\n        />\n      </label>\n    );\n  }\n\n  renderSelectCurrencies(value, handleChange) {\n    const { currencies } = this.props;\n    return (\n      <select\n        id=\"currency-input\"\n        name=\"currency\"\n        data-testid=\"currency-input\"\n        onChange={ handleChange }\n        value={ value }\n        className=\"currency-input\"\n      >\n        {currencies.map((currency) => {\n          if (currency === 'USDT') return '';\n          return (\n            <option key={ currency } data-testid={ currency }>\n              {currency}\n            </option>\n          );\n        })}\n      </select>\n    );\n  }\n\n  renderSelect(label, name, value, options) {\n    return (\n      <label htmlFor={ `${name}-input` }>\n        {`${label}: `}\n        <select\n          id={ `${name}-input` }\n          name={ name }\n          data-testid={ `${name}-input` }\n          onChange={ this.handleChange }\n          value={ value }\n        >\n          {options.map((option) => (\n            <option key={ option }>{option}</option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n\n  render() {\n    const { value, description, currency, method, tag } = this.state;\n    const tags = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    const methods = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n    return (\n      <form className=\"edit-expense-form\">\n        <label htmlFor=\"currency-input\">\n          {'Moeda: '}\n          {this.renderSelectCurrencies(currency, this.handleChange)}\n        </label>\n        {this.renderInput('Valor', 'number', 'value', value)}\n        {this.renderInput('Descrição', 'text', 'description', description)}\n        {this.renderSelect('Tag', 'tag', tag, tags)}\n        {this.renderSelect('Método de pagamento', 'method', method, methods)}\n        <button\n          type=\"submit\"\n          onClick={ this.handleClick }\n          className=\"expense-btn end-edit\"\n        >\n          Editar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n  expenseId: state.wallet.expenseId,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrencies: () => dispatch(getCurrencies()),\n  endExpenseEdit: (expense) => dispatch(finishExpenseEdit(expense)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditExpenseForm);\n\nEditExpenseForm.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.string),\n  expenses: PropTypes.arrayOf(PropTypes.object),\n  expenseId: PropTypes.number.isRequired,\n  endExpenseEdit: PropTypes.func.isRequired,\n};\n\nEditExpenseForm.defaultProps = {\n  currencies: [],\n  expenses: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { RiDeleteBinLine, RiEditLine } from 'react-icons/ri';\nimport { deleteExpense as eraseExpense, editExpense as modifyExpense } from '../actions';\n\nclass ExpensesTable extends React.Component {\n  renderButton(name, expense, callback) {\n    return (\n      <button\n        type=\"button\"\n        data-testid={ `${name}-btn` }\n        onClick={ () => callback(expense) }\n        className={ `${name}-btn expense-opt-btn` }\n      >\n        {name === 'edit' ? <RiEditLine /> : <RiDeleteBinLine />}\n      </button>\n    );\n  }\n\n  render() {\n    const { expenses, deleteExpense, editExpense } = this.props;\n    return (\n      <table>\n        <thead className=\"table-header\">\n          <tr>\n            <th>Moeda</th>\n            <th>Valor</th>\n            <th>Câmbio utilizado</th>\n            <th>Moeda de conversão</th>\n            <th>Valor convertido</th>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n        <tbody className=\"table-body\">\n          {expenses.map((expense, index) => {\n            const { description, tag, method, value, currency, exchangeRates } = expense;\n            const { name, ask } = exchangeRates[currency];\n            return (\n              <tr key={ index }>\n                <td>{name}</td>\n                <td>{value}</td>\n                <td>{parseFloat(ask).toFixed(2)}</td>\n                <td>Real</td>\n                <td>{(ask * parseInt(value, 10)).toFixed(2)}</td>\n                <td>{description}</td>\n                <td>{tag}</td>\n                <td>{method}</td>\n                <td>\n                  {this.renderButton('edit', expense, editExpense)}\n                  {this.renderButton('delete', expense, deleteExpense)}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExpense: (expense) => dispatch(eraseExpense(expense)),\n  editExpense: (expense) => dispatch(modifyExpense(expense)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpensesTable);\n\nExpensesTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object),\n  deleteExpense: PropTypes.func.isRequired,\n  editExpense: PropTypes.func.isRequired,\n};\n\nExpensesTable.defaultProps = {\n  expenses: [],\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { fetchCurrencies as getCurrencies } from '../actions';\nimport { ExpensesTable, Header, NewExpenseForm, EditExpenseForm } from '../components';\n\nimport '../styles/Wallet.css';\n\nclass Wallet extends React.Component {\n  componentDidMount() {\n    const { fetchCurrencies } = this.props;\n    fetchCurrencies();\n  }\n\n  render() {\n    const { isEditing } = this.props;\n    return (\n      <main className=\"wallet-main\">\n        <Header />\n        { isEditing ? <EditExpenseForm /> : <NewExpenseForm />}\n        <ExpensesTable />\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isEditing: state.wallet.isEditing,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrencies: () => dispatch(getCurrencies()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n\nWallet.propTypes = {\n  isEditing: PropTypes.bool,\n  fetchCurrencies: PropTypes.func.isRequired,\n};\n\nWallet.defaultProps = {\n  isEditing: false,\n};\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/carteira\" component={ Wallet } />\n      <Route exact path=\"/\" component={ Login } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { EMAIL } from '../actions';\n\nconst INITIAL_STATE_USER = {\n  email: '',\n};\n\nexport default function user(state = INITIAL_STATE_USER, action) {\n  switch (action.type) {\n  case EMAIL:\n    return { ...state, email: action.payload };\n  default:\n    return state;\n  }\n}\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport {\n  REQUEST_START,\n  REQUEST_SUCCESS,\n  REQUEST_FAIL,\n  SAVE_EXPENSE,\n  DELETE_EXPENSE,\n  EDIT_EXPENSE_START,\n  EDIT_EXPENSE_END,\n} from '../actions';\n\nconst INITIAL_STATE_WALLET = {\n  currencies: [],\n  expenses: [],\n};\n\nexport default function wallet(state = INITIAL_STATE_WALLET, action) {\n  switch (action.type) {\n  case REQUEST_START:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case REQUEST_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currencies: [...Object.keys(action.currencies)],\n    };\n  case REQUEST_FAIL:\n    return { ...state, isFetching: false, error: action.error };\n  case SAVE_EXPENSE:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.expenses],\n    };\n  case DELETE_EXPENSE:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses.filter((expense) => expense.id !== action.expense.id),\n      ],\n      isEditing: false,\n    };\n  case EDIT_EXPENSE_START:\n    return {\n      ...state,\n      isEditing: true,\n      expenseId: action.expense.id,\n    };\n  case EDIT_EXPENSE_END:\n    return {\n      ...state,\n      expenses: state.expenses.map((item) => {\n        if (item.id === action.expense.id) return { ...item, ...action.expense };\n        return item;\n      }),\n      isEditing: false,\n    };\n  default:\n    return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nconst reducer = combineReducers({ user, wallet });\n\nexport default reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}